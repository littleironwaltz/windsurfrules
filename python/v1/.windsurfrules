# Windsurf: Pythonプロジェクト

# 1. 基本動作原則
basic_operation_principles:
  - name: instruction_reception
    description: "ユーザー要件・仕様を正確に受け取り、不明点は問いかける。"
  - name: analysis_planning
    description: "タスク分析とリスク評価を行い、段階的な実装計画を策定。"
  - name: incremental_implementation
    description: "少しずつ実装→テスト→レビューを反復し、品質を高める。"
  - name: continuous_feedback
    description: "適宜進捗を共有し、重要な決定や不具合を素早く共有・修正。"

# 2. 技術スタックとバージョン管理
tech_stack:
  language: Python
  version: ">= 3.9"
  # poetryやpipenv、venvなど仮想環境の利用を推奨
  venv_manager: "poetry"
  # majorバージョンアップは承認制
version_policy:
  require_approval_for_major_upgrade: true

# 3. プロジェクト構造規約
project_structure:
  python_app:
    root_dir: "py-app/"
    layers:
      domain: { allowed_imports: [] }
      usecase: { allowed_imports: [domain] }
      interface: { allowed_imports: [usecase] }
    # 変更禁止ファイルや重要設定ファイルなど
    protected_files:
      - "py-app/core/config.py"
      - "py-app/core/security.py"

# 4. ルール定義一覧

### 4.1: PEP8 & Pythonicスタイル
rule1_idiomatic_python:
  command: "PEP8 / Pythonic 準拠"
  priority: Critical
  description: "PEP8, Black, isort, flake8 などを使い、慣用的かつ整形されたコードに。"
  recommendations:
    - "明確な命名 (snake_case)"
    - "厳しめのflake8ルール"
    - "f-string で可読性を高める"
  depends_on: []
  enforcement: strict

### 4.2: クリーンアーキテクチャ
rule2_clean_architecture:
  command: "レイヤー化設計 (domain/usecase/interface)"
  priority: High
  description: "外部依存から内部へ向かう一方向依存を徹底し、ドメインロジックを独立化。"
  depends_on: [rule1_idiomatic_python]
  enforcement: strict

### 4.3: 依存関係管理
rule3_dependency_management:
  command: "Poetry/Pipenvでのパッケージ管理"
  priority: High
  description: "pyproject.toml, poetry.lock を整合し、再現可能ビルドを確立。"
  depends_on: []
  config:
    python_version: "3.9+"
  enforcement: strict

### 4.4: テスト戦略
rule4_testing:
  command: "包括的テスト & カバレッジ確保"
  priority: Critical
  description: "pytest, unittest, coverageなどを活用。テーブルドリブンテストに相当するパラメタライズを推奨。"
  config:
    coverage_target: 85
  depends_on: [rule1_idiomatic_python]
  enforcement: strict

### 4.5: エラー処理
rule5_error_handling:
  command: "例外処理の標準化"
  priority: High
  description: "独自例外クラスで詳細を把握しやすく。logging/traceで原因を可視化。"
  config:
    classification:
      transient: { retries: 3 }
      fatal: { logging: CRITICAL }
  depends_on: [rule4_testing]
  enforcement: strict

### 4.6: ログ管理
rule6_logging:
  command: "構造化ログ & ログレベル運用"
  priority: Medium
  description: "jsonやdict形式のログ出力（structlog等）で分析しやすく。"
  config:
    levels: [DEBUG, INFO, WARN, ERROR]
  depends_on: [rule5_error_handling]
  enforcement: strict

### 4.7: セキュリティ対策
rule7_security:
  command: "OWASP & banditスキャン"
  priority: Critical
  description: "入力バリデーション/CSRF対策/脆弱性スキャンを徹底。"
  depends_on: [rule5_error_handling, rule4_testing]
  enforcement: strict

### 4.8: 並行処理 & パフォーマンス
rule8_concurrency_performance:
  command: "マルチプロセス/スレッド/asyncの設計 & 速度最適化"
  priority: Medium
  description: "GIL考慮、multiprocessingやasyncio, cProfileでボトルネック把握。"
  depends_on: [rule4_testing]
  enforcement: advisory

### 4.9: SOLID / リファクタリング
rule9_solid_refactor:
  command: "単一責任・オブジェクト分離 & スパゲッティ防止"
  priority: High
  description: "クラス/関数が膨れ上がらないように設計を見直す。"
  depends_on: [rule2_clean_architecture]
  enforcement: advisory

### 4.10: ドキュメント規範
rule10_documentation:
  command: "Docstring/Sphinx/ADR整備"
  priority: Medium
  description: "関数やクラスにdocstringを徹底し、ADRで重要設計を明文化。"
  depends_on: [rule2_clean_architecture]
  enforcement: strict

### 4.11: 環境設定
rule11_configuration:
  command: "12-factor App的設定管理"
  priority: High
  description: "dotenv, OS環境変数を安全に扱い、本番環境と密結合しないようにする。"
  depends_on: [rule3_dependency_management]
  enforcement: strict

### 4.12: 可観測性
rule12_observability:
  command: "ログ・メトリクス・トレースの統合"
  priority: High
  description: "logging/metrics/tracingツールを連携し、障害時の原因究明を効率化。"
  depends_on: [rule6_logging, rule5_error_handling]
  enforcement: strict

# 5. 実行戦略 (Execution Policy)
execution_policy:
  modes:
    strict:
      rules: all
      resource: high
    balanced:
      rules: [1,2,3,4,5,7,11]
      resource: medium
    lenient:
      rules: [1,4,5,6,8]
      resource: low

  context_profiles:
    new_feature:
      focus: [2,4,7,9,10]
      suppress: [8]
    bug_fix:
      focus: [4,5,7]
      suppress: [10]
    refactor:
      focus: [9]
      suppress: [7]

# 6. 例外処理
exceptions:
  legacy_code:
    markers: ["#legacy", "#LEGACY"]
    rules: [4,9]
    action: warn
  experimental:
    markers: ["#experimental", "#beta"]
    rules: [8,7]
    action: notify
  vendor_third_party:
    paths: ["/venv/", "/site-packages/", "/third_party/"]
    rules: all
    action: suppress

# 7. 可視化・学習システム
visualization:
  severity:
    critical:
      color: "#F00"
      sound: alert
    high:
      color: "#FA0"
    medium:
      color: "#FF0"
    advisory:
      color: "#0F0"

learning_system:
  feedback_loop:
    enabled: true
  adaptive_rules:
    adjustment_rate: 0.25

# 8. 実装プロセス & エラー対応プロトコル
implementation_process:
  - phase: "initial_analysis"
    tasks:
      - "要件と技術的制約の整理"
      - "リスク評価とドメインの理解"
  - phase: "implementation"
    tasks:
      - "段階的に開発 → pytestでテスト"
      - "flake8/Black/isortによるスタイルチェック"
  - phase: "verification"
    tasks:
      - "統合テスト/性能テスト"
      - "coverage報告 (目標達成を確認)"
  - phase: "final_check"
    tasks:
      - "docstring最終整備 (Sphinx用に確認)"
      - "セキュリティスキャン・レビュー実施"

error_handling_protocol:
  - step: "問題特定"
    detail: "例外メッセージの解析、影響範囲の洗い出し"
  - step: "解決策策定"
    detail: "複数案の評価とリスク比較後、最適解を選定"
  - step: "実装・検証"
    detail: "修正コードを適用し、pytestで再発防止を検証"
  - step: "文書化"
    detail: "原因と対策をチームで共有し、再発防止策を提案"
